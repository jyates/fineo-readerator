<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <parent>
    <artifactId>readerator-parent</artifactId>
    <groupId>io.fineo.read</groupId>
    <version>1.0-SNAPSHOT</version>
  </parent>
  <modelVersion>4.0.0</modelVersion>

  <artifactId>fineo-adapter-drill</artifactId>

  <build>
    <pluginManagement>
      <plugins>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>${surefire.version}</version>
          <configuration>
            <skip>${skip.default.tests}</skip>
          </configuration>
          <executions>
            <execution>
              <id>local-tests</id>
              <goals>
                <goal>test</goal>
              </goals>
              <configuration>
                <redirectTestOutputToFile>${test.output.to.file}</redirectTestOutputToFile>
                <argLine>-enableassertions -Djava.security.egd=file:/dev/./urandom
                  -Dsqlite4java.library.path=${project.build.directory}/dependencies
                  -Djava.net.preferIPv4Stack=true
                </argLine>
                <excludedGroups>${surefire.cluster.tests}</excludedGroups>
                <skip>${test.skip.simple}</skip>
                <!-- simple tests should have no interdependencies and can run highly parallel -->
                <parallel>both</parallel>
                <useUnlimitedThreads>true</useUnlimitedThreads>
              </configuration>
            </execution>
            <execution>
              <id>cluster-tests</id>
              <goals>
                <goal>test</goal>
              </goals>
              <configuration>
                <redirectTestOutputToFile>${test.output.to.file}</redirectTestOutputToFile>
                <argLine>-enableassertions -Djava.security.egd=file:/dev/./urandom
                  -Dsqlite4java.library.path=${project.build.directory}/dependencies
                  -Djava.net.preferIPv4Stack=true
                </argLine>
                <groups>${surefire.cluster.tests}</groups>
                <skip>${test.skip.cluster}</skip>
                <!-- Cluster tests run serially (drill cluster/zk always starts on same port) and
                in different JVMs to support clean connection obtainment -->
                <forkCount>1</forkCount>
                <reuseForks>false</reuseForks>
              </configuration>
            </execution>
          </executions>
        </plugin>
      </plugins>
    </pluginManagement>
    <plugins>
      <!-- Run local dynamo -->
      <plugin>
        <artifactId>maven-dependency-plugin</artifactId>
      </plugin>
      <plugin>
        <artifactId>maven-jar-plugin</artifactId>
      </plugin>
      <!-- Attach the sources to the build so we can use custom functions -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-source-plugin</artifactId>
        <version>2.4</version>
        <executions>
          <execution>
            <id>attach-sources</id>
            <phase>package</phase>
            <goals>
              <goal>jar-no-fork</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <!-- Add sources to the classpath - so we can run functions locally -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <version>1.9.1</version>
        <executions>
          <execution>
            <id>default-cli</id>
            <phase>process-sources</phase>
            <goals>
              <goal>add-resource</goal>
            </goals>
            <configuration>
              <resources>
                <resource>
                  <directory>src/main/java</directory>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

  <dependencies>
    <!-- Intra-project -->
    <dependency>
      <groupId>io.fineo.read</groupId>
      <artifactId>test-util</artifactId>
    </dependency>
    <dependency>
      <groupId>io.fineo.read</groupId>
      <artifactId>drill-storage-dynamo</artifactId>
    </dependency>
    <dependency>
      <groupId>io.fineo.read</groupId>
      <artifactId>fineo-reparser</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>io.fineo.user</groupId>
      <artifactId>mgmt-core</artifactId>
      <version>1.0-SNAPSHOT</version>
    </dependency>

    <dependency>
      <groupId>com.amazonaws</groupId>
      <artifactId>aws-java-sdk-core</artifactId>
    </dependency>
    <dependency>
      <groupId>io.fineo.schema</groupId>
      <artifactId>schema-core</artifactId>
    </dependency>
    <dependency>
      <groupId>io.fineo.etl.pipeline</groupId>
      <artifactId>dynamo-access</artifactId>
    </dependency>

    <!-- Drill dependencies -->
    <dependency>
      <groupId>org.apache.drill.exec</groupId>
      <artifactId>drill-jdbc</artifactId>
      <version>${drill.version}</version>
    </dependency>
    <dependency>
      <groupId>org.apache.drill.exec</groupId>
      <artifactId>drill-jdbc</artifactId>
      <version>${drill.version}</version>
      <classifier>tests</classifier>
    </dependency>
    <dependency>
      <groupId>org.apache.drill.exec</groupId>
      <artifactId>drill-java-exec</artifactId>
      <version>${drill.version}</version>
      <classifier>tests</classifier>
      <scope>compile</scope>
    </dependency>
    <!-- Force dependencies to match drill requirements -->
    <dependency>
      <groupId>com.sun.jersey</groupId>
      <artifactId>jersey-core</artifactId>
      <version>1.9</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.calcite</groupId>
      <artifactId>calcite-core</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.calcite</groupId>
      <artifactId>calcite-linq4j</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.calcite</groupId>
      <artifactId>calcite-avatica</artifactId>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-core</artifactId>
      <version>2.7.1</version>
    </dependency>
    <dependency>
      <groupId>com.google.guava</groupId>
      <artifactId>guava</artifactId>
    </dependency>

    <!-- Test Dependencies -->
    <dependency>
      <groupId>io.fineo.etl</groupId>
      <artifactId>dynamo-common</artifactId>
      <version>${fineo.ingest.version}</version>
      <scope>test</scope>
      <classifier>tests</classifier>
    </dependency>
    <dependency>
      <groupId>com.amazonaws</groupId>
      <artifactId>aws-java-sdk-dynamodb</artifactId>
      <version>${aws.java.sdk.version}</version>
    </dependency>
    <dependency>
      <groupId>com.amazonaws</groupId>
      <artifactId>DynamoDBLocal</artifactId>
      <version>${aws.dynamodb.local.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.fineo.schema</groupId>
      <artifactId>schema-core</artifactId>
      <classifier>tests</classifier>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.fineo.schema</groupId>
      <artifactId>schema-repo-dynamodb</artifactId>
      <classifier>tests</classifier>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.fineo.schema</groupId>
      <artifactId>schema-lambda</artifactId>
      <version>${fineo.schema.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.fineo.schema</groupId>
      <artifactId>schema-lambda</artifactId>
      <classifier>tests</classifier>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.fineo.etl.pipeline</groupId>
      <artifactId>stream-processing</artifactId>
      <version>${fineo.ingest.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.fineo.aws</groupId>
      <artifactId>aws-common</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.fineo.read</groupId>
      <artifactId>drill-common</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.fineo.read</groupId>
      <artifactId>drill-common</artifactId>
      <classifier>tests</classifier>
    </dependency>
    <dependency>
      <groupId>org.apache.drill</groupId>
      <artifactId>drill-common</artifactId>
      <classifier>tests</classifier>
    </dependency>
    <dependency>
      <groupId>io.fineo.etl.pipeline</groupId>
      <artifactId>pipeline-utils</artifactId>
      <version>${fineo.ingest.version}</version>
      <scope>test</scope>
      <classifier>tests</classifier>
    </dependency>
    <dependency>
      <groupId>io.fineo.read</groupId>
      <artifactId>drill-storage-dynamo</artifactId>
      <classifier>tests</classifier>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>jcl-over-slf4j</artifactId>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>jul-to-slf4j</artifactId>
    </dependency>
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <profiles>
    <profile>
      <id>deploy</id>
      <activation>
        <property>
          <name>deploy</name>
        </property>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-shade-plugin</artifactId>
            <version>${maven.shade.version}</version>
            <configuration>
              <createDependencyReducedPom>false</createDependencyReducedPom>
              <shadedArtifactAttached>true</shadedArtifactAttached>
              <shadedClassifierName>standalone</shadedClassifierName>
            </configuration>
            <executions>
              <execution>
                <phase>package</phase>
                <goals>
                  <goal>shade</goal>
                </goals>
                <configuration>
                  <artifactSet>
                    <excludes>
                      <exclude>net.hydromatic:foodmart-data-json</exclude>
                      <exclude>org.apache.drill.exec:drill-jdbc-all</exclude>
                      <exclude>commons-logging:commons-logging</exclude>
                      <!-- Test jars -->
                      <exclude>io.fineo.etl:dynamo-common:tests</exclude>
                      <exclude>io.fineo.read:drill-dynamo-storage:tests</exclude>
                      <exclude>junit:junit</exclude>
                      <exclude>org.mockito:mockito-all</exclude>
                      <exclude>com.amazonaws:DynamoDBLocal</exclude>
                      <exclude>io.fineo.aws:aws-common</exclude>
                      <exclude>io.fineo.schema:schema-core:tests</exclude>
                      <exclude>io.fineo.etl.pipeline:pipeline-utils</exclude>
                      <exclude>org.hamcrest:hamcrest-core</exclude>
                      <!-- aws transitive dependencies-->
                      <exclude>com.amazonaws:aws-java-sdk-elastic*</exclude>
                      <exclude>com.amazonaws:aws-java-sdk-cloud*</exclude>
                      <exclude>com.amazonaws:aws-java-sdk-cognito*</exclude>
                      <exclude>com.amazonaws:aws-java-sdk-marketplace*</exclude>
                      <exclude>com.amazonaws:aws-java-sdk-code*</exclude>
                      <exclude>com.amazonaws:aws-java-sdk-support</exclude>
                      <exclude>com.amazonaws:aws-java-sdk-simpledb</exclude>
                      <exclude>com.amazonaws:aws-java-sdk-simpleworkflow</exclude>
                      <exclude>com.amazonaws:aws-java-sdk-storagegateway</exclude>
                      <exclude>com.amazonaws:aws-java-sdk-route53</exclude>
                      <exclude>com.amazonaws:aws-java-sdk-importexport</exclude>
                      <exclude>com.amazonaws:aws-java-sdk-sts</exclude>
                      <exclude>com.amazonaws:aws-java-sdk-sqs</exclude>
                      <exclude>com.amazonaws:aws-java-sdk-rds</exclude>
                      <exclude>com.amazonaws:aws-java-sdk-redshift</exclude>
                      <exclude>com.amazonaws:aws-java-sdk-glacier</exclude>
                      <exclude>com.amazonaws:aws-java-sdk-iam</exclude>
                      <exclude>com.amazonaws:aws-java-sdk-datapipeline</exclude>
                      <exclude>com.amazonaws:aws-java-sdk-emr</exclude>
                      <exclude>com.amazonaws:aws-java-sdk-ec2</exclude>
                      <exclude>com.amazonaws:aws-java-sdk-sns</exclude>
                      <exclude>com.amazonaws:aws-java-sdk-logs</exclude>
                      <exclude>com.amazonaws:aws-java-sdk-events</exclude>
                      <exclude>com.amazonaws:aws-java-sdk-directconnect</exclude>
                      <exclude>com.amazonaws:aws-java-sdk-ses</exclude>
                      <exclude>com.amazonaws:aws-java-sdk-kinesis</exclude>
                      <exclude>com.amazonaws:aws-java-sdk-opsworks</exclude>
                      <exclude>com.amazonaws:aws-java-sdk-autoscaling</exclude>
                      <exclude>com.amazonaws:aws-java-sdk-sqf-libraries</exclude>
                      <exclude>com.amazonaws:aws-java-sdk-kms</exclude>
                      <exclude>com.amazonaws:aws-java-sdk-config</exclude>
                      <exclude>com.amazonaws:aws-java-sdk-ecs</exclude>
                      <exclude>com.amazonaws:aws-java-sdk-ecr</exclude>
                      <exclude>com.amazonaws:aws-java-sdk-cloudhsm</exclude>
                      <exclude>com.amazonaws:aws-java-sdk-ssm</exclude>
                      <exclude>com.amazonaws:aws-java-sdk-workspaces</exclude>
                      <exclude>com.amazonaws:aws-java-sdk-machinelearning</exclude>
                      <exclude>com.amazonaws:aws-java-sdk-directory</exclude>
                      <exclude>com.amazonaws:aws-java-sdk-efs</exclude>
                      <exclude>com.amazonaws:aws-java-sdk-devicefarm</exclude>
                      <exclude>com.amazonaws:aws-java-sdk-waf</exclude>
                      <exclude>com.amazonaws:aws-java-sdk-inspector</exclude>
                      <exclude>com.amazonaws:aws-java-sdk-iot</exclude>
                      <exclude>com.amazonaws:aws-java-sdk-api-gateway</exclude>
                      <exclude>com.amazonaws:aws-java-sdk-acm</exclude>
                      <exclude>com.amazonaws:aws-java-sdk-gamelift</exclude>
                      <exclude>com.amazonaws:aws-java-sdk-dms</exclude>
                      <exclude>com.amazonaws:aws-java-sdk-servicecatalog</exclude>
                      <exclude>com.amazonaws:aws-java-sdk-snowball</exclude>
                      <exclude>com.amazonaws:aws-java-sdk-autoscaling</exclude>
                      <exclude>com.amazonaws:aws-java-sdk-discovery</exclude>
                      <exclude>com.amazonaws:aws-java-sdk-swf-libraries</exclude>
                      <exclude>org.glassfish.hk2.external:aopalliance-repackaged</exclude>
                      <exclude>aopalliance:aopalliance</exclude>
                      <exclude></exclude>
                    </excludes>
                  </artifactSet>
                  <filters>
                    <filter>
                      <artifact>*:*</artifact>
                      <excludes>
                        <exclude>META-INF/*.SF</exclude>
                        <exclude>META-INF/*.DSA</exclude>
                        <exclude>META-INF/*.RSA</exclude>
                        <exclude>.gitkeep</exclude>
                        <!-- Force classpath rescanning every time we start drill. Makes it so we
                           can have a single deployable jar. LATER, when we want to roll out an
                           independent cluster, we can just build a fineo jars (dynamo and adapter)
                           and there will be no prescanned file (or we can make one on build) -->
                        <exclude>META-INF/drill-module-scan/registry.json</exclude>
                        <!-- Executable producer - huge!... not needed since we use the java api -->
                        <exclude>amazon-kinesis-producer-native-binaries/**</exclude>
                        <!-- amazon json models -->
                        <exclude>models/lambda*</exclude>
                        <exclude>models/discovery*</exclude>
                        <exclude>models/streams.dynamo*</exclude>
                      </excludes>
                    </filter>
                    <filter>
                      <artifact>org.apache.drill.exec:drill-*:jar:tests</artifact>
                      <excludes>
                        <exclude>*.json</exclude>
                      </excludes>
                    </filter>
                  </filters>
                  <transformers>
                    <transformer
                       implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                      <resource>drill-module.conf</resource>
                    </transformer>
                    <transformer
                       implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                      <manifestEntries>
                        <X-Compile-Source-JDK>${java.version}</X-Compile-Source-JDK>
                        <X-Compile-Target-JDK>${java.version}</X-Compile-Target-JDK>
                      </manifestEntries>
                    </transformer>
                  </transformers>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>iso</id>
      <properties>
        <skip.default.tests>false</skip.default.tests>
        <test.skip.simple>true</test.skip.simple>
        <test.skip.cluster>true</test.skip.cluster>
      </properties>
      <build>
        <pluginManagement>
          <plugins>
            <plugin>
              <groupId>org.apache.maven.plugins</groupId>
              <artifactId>maven-surefire-plugin</artifactId>
              <version>${surefire.version}</version>
              <configuration>
                <forkCount>1</forkCount>
                <reuseForks>false</reuseForks>
              </configuration>
            </plugin>
          </plugins>
        </pluginManagement>
      </build>
    </profile>
  </profiles>
</project>
