package io.fineo.read.serve.util;

import com.google.common.collect.ImmutableList;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;

import static com.google.common.collect.ImmutableList.of;

/**
 *
 */
public class FulfilledStatement implements Statement {
  private String query;
  private int max = 100;
  private int maxRows;
  private String cursor;
  private ResultSet result;
  private Connection connection;
  private boolean closed;
  private boolean closeOnComplete;

  public FulfilledStatement(IteratorResult iter, Connection conn){
    this.result = iter.withStatement(this);
    this.connection = conn;
  }

  @Override
  public ResultSet executeQuery(String sql) throws SQLException {
    this.query = sql;
    return this.result;
  }

  @Override
  public int executeUpdate(String sql) throws SQLException {
    throw new UnsupportedOperationException();
  }

  @Override
  public void close() throws SQLException {
    this.closed = true;
  }

  @Override
  public int getMaxFieldSize() throws SQLException {
    return max;
  }

  @Override
  public void setMaxFieldSize(int max) throws SQLException {
    this.max = max;
  }

  @Override
  public int getMaxRows() throws SQLException {
    return 0;
  }

  @Override
  public void setMaxRows(int max) throws SQLException {
    this.maxRows = max;
  }

  @Override
  public void setEscapeProcessing(boolean enable) throws SQLException {
    // noop
  }

  @Override
  public int getQueryTimeout() throws SQLException {
    return 1000;
  }

  @Override
  public void setQueryTimeout(int seconds) throws SQLException {
    //noop - we have all the data
  }

  @Override
  public void cancel() throws SQLException {
    // too late - we are done
  }

  @Override
  public SQLWarning getWarnings() throws SQLException {
    return null;
  }

  @Override
  public void clearWarnings() throws SQLException {
  }

  @Override
  public void setCursorName(String name) throws SQLException {
    this.cursor = name;
  }

  @Override
  public boolean execute(String sql) throws SQLException {
    this.result = executeQuery(sql);
    return true;
  }

  @Override
  public ResultSet getResultSet() throws SQLException {
    return this.result;
  }

  @Override
  public int getUpdateCount() throws SQLException {
    return -1;
  }

  @Override
  public boolean getMoreResults() throws SQLException {
    return false;
  }

  @Override
  public void setFetchDirection(int direction) throws SQLException {
    // ignore = don't care
  }

  @Override
  public int getFetchDirection() throws SQLException {
    return 0;
  }

  @Override
  public void setFetchSize(int rows) throws SQLException {
    // don't care
  }

  @Override
  public int getFetchSize() throws SQLException {
    return 0;
  }

  @Override
  public int getResultSetConcurrency() throws SQLException {
    return 0;
  }

  @Override
  public int getResultSetType() throws SQLException {
    return 0;
  }

  @Override
  public void addBatch(String sql) throws SQLException {
    throw new UnsupportedOperationException("Cannot addBatch() to a complete statement");
  }

  @Override
  public void clearBatch() throws SQLException {
    //
  }

  @Override
  public int[] executeBatch() throws SQLException {
    throw new UnsupportedOperationException("Cannot addBatch() to a complete statement");
  }

  @Override
  public Connection getConnection() throws SQLException {
    return connection;
  }

  @Override
  public boolean getMoreResults(int current) throws SQLException {
    return false;
  }

  @Override
  public ResultSet getGeneratedKeys() throws SQLException {
    // empty result set
    return new IteratorResult(new SimpleMetadata("", "", "", of()),
      ImmutableList.<Object[]>of().iterator());
  }

  @Override
  public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
    throw new UnsupportedOperationException();
  }

  @Override
  public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
    throw new UnsupportedOperationException();
  }

  @Override
  public int executeUpdate(String sql, String[] columnNames) throws SQLException {
    throw new UnsupportedOperationException();
  }

  @Override
  public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
    return execute(sql);
  }

  @Override
  public boolean execute(String sql, int[] columnIndexes) throws SQLException {
    return execute(sql);
  }

  @Override
  public boolean execute(String sql, String[] columnNames) throws SQLException {
    return execute(sql);
  }

  @Override
  public int getResultSetHoldability() throws SQLException {
    return 0;
  }

  @Override
  public boolean isClosed() throws SQLException {
    return this.closed;
  }

  @Override
  public void setPoolable(boolean poolable) throws SQLException {
    //noop
  }

  @Override
  public boolean isPoolable() throws SQLException {
    return false;
  }

  @Override
  public void closeOnCompletion() throws SQLException {
    this.closeOnComplete = true;
  }

  @Override
  public boolean isCloseOnCompletion() throws SQLException {
    return closeOnComplete;
  }

  @Override
  public <T> T unwrap(Class<T> iface) throws SQLException {
    throw new UnsupportedOperationException();
  }

  @Override
  public boolean isWrapperFor(Class<?> iface) throws SQLException {
    return false;
  }
}
